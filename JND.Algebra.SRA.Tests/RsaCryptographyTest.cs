using System;
using System.Numerics;
using System.Text;
using JND.Algebra.SRA.Cryptography;
using Xunit;

namespace JND.Algebra.SRA.Tests;

public class RsaCryptographyTest
{
    [Fact]
    public void Send_an_secure_message_successfully()
    {
        // Arrange
        const int keySize = 128;
        var sut = new RSACrypto(keySize);

        // Act
        var result = sut.Encrypt("Hello World");

        // Assert
        Assert.Equal("Hello World", sut.Decrypt(result));
        Assert.True(sut.PublicKey > 0);
        Assert.True(sut.PublicExponent > 0);
    }
    
    [Fact]
    public void Decrypt_a_message_with_keys()
    {
        // Arrange
        const string encryptedMessage = "API0Jr86KlYpp05DFQ3Pr9WxS8AcxF/OKnZIJxcV";
        const string publicExponent = "20082943939725136313135079374500933468897086828629638261965076291869398599467512658141088230561114468341195807738173010422352761225232614347583732094483248470320607693586933050804729651036381164573962905149485004394010862558822226255878602993874468248929322190152857516539218055357648190223323377344544416716008025966150273887793349932335494159942374227847111150272811654699020428288384619855117676902026840196059890931580030108715681386947377453991630125417882650803185026564998983043256919867763220933886697455191445521374829357569155758275562330268385286493981034258438828470873438294276056177522448239879504728327";
        const string privateValue = "13388629293150090875423386249667288979264724552419758841310050861246265732978341772094058820374076312227463871825448673614901840816821742898389154729655498980213738462391288700536486434024254109715975270099656669596007241705881484170585735329249645499286214793435238344359478703571765460148882251563029611143816309900787678287833694786074679826366523371307738281083087822270946176784593144035586982412020657471179381669281566847346873080285263203676019634360017464338272681678787025730824741571404034552941321854712425862867095415435511135309684078892228787992738702151594325588223574942298008926990630016914072468571";
        var publicExponentKey = BigInteger.Parse(publicExponent);
        var publicKey = new BigInteger(3);
        var privateKey = BigInteger.Parse(privateValue);
        const int keySize = 1024;

        var sut = new RSACrypto(keySize, publicKey, privateKey, publicExponentKey);

        // Act
        var result = sut.Decrypt(encryptedMessage);

        // Assert
        Assert.Equal("Hola Mundo", result);
        Assert.True(sut.PublicKey > 0);
        Assert.True(sut.PublicExponent > 0);
    }
}